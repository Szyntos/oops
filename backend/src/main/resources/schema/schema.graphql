type Mutation {
  addBonus(
    chestHistoryId: Int!
    awardIds: [Int!]!
    checkDates: Boolean = true
  ): [AddBonusReturnType!]!

  addPoints(
    studentId: Int!
    teacherId: Int!
    value: Float!
    subcategoryId: Int!
    checkDates: Boolean = true
  ): PointType


  addPointsToGroup(
    groupId: Int!,
    teacherId: Int!,
    values: [GroupPointsInputType!]!,
    subcategoryId: Int!,
    checkDates: Boolean = true
  ): [GroupPointsType!]!

  assignPhotosToGroups(editionId: Int!): Boolean
  assignPhotoToUser(userId: Int!, fileId: Int): Boolean
  assignPhotoToLevel(levelId: Int!, fileId: Int): Boolean
  assignPhotoToAward(awardId: Int!, fileId: Int): Boolean
  assignPhotoToChest(chestId: Int!, fileId: Int): Boolean
  addAward(
    awardName: String!
    awardType: String!
    awardValue: Float!
    categoryId: Int!
    maxUsages: Int = -1
    description: String!
    fileId: Int
    label: String = ""
  ): AwardType

  copyAward(
    awardId: Int!
  ): AwardType

  addAwardToEdition(awardId: Int!, editionId: Int!): AwardEditionType
  addChestToUser(
    userId: Int!
    chestId: Int!
    teacherId: Int!
    subcategoryId: Int!
  ): ChestHistoryType

  addChest(
    chestType: String!,
    fileId: Int,
    awardBundleCount: Int!,
    label: String = "",
    awardIds: [Int!]!
  ): ChestType

  addCategory(
    categoryName: String!
    canAddPoints: Boolean!
    subcategories: [SubcategoryInputType!]!
    lightColor: String = "#FFFFFF"
    darkColor: String = "#000000"
    label: String = ""
  ): CategoryType

  copyCategory(
    categoryId: Int!
  ): CategoryType

  addCategoryToEdition(categoryId: Int!, editionId: Int!): CategoryEditionType
  addEdition(
    editionName: String!
    editionYear: Int!
    label: String = ""
  ): EditionType

  copyEdition(
    editionId: Int!
    editionYear: Int!
  ): EditionType


  addGradingCheck(
    editionId: Int!
    endOfLabsDate: String!
    endOfLabsLevelsThreshold: Int!
    projectPointsThreshold: Float!
    projectId: Int!
    checkDates: Boolean = true
  ): GradingChecksType
  editGradingCheck(
    gradingCheckId: Int!,
    endOfLabsDate: String,
    endOfLabsLevelsThreshold: Int,
    projectPointsThreshold: Float,
    projectId: Int
  ): GradingChecksType
  removeGradingCheck(
    gradingCheckId: Int!
  ): Boolean
  addGroup(
    editionId: Int!
    usosId: Int!
    weekdayId: Int!
    startTime: String!
    endTime: String!
    teacherId: Int!
    label: String = ""
    groupName: String = ""
  ): GroupType
  addGroupWithUsers(
    editionId: Int!
    usosId: Int!
    weekdayId: Int!
    startTime: String!
    endTime: String!
    teacherId: Int!
    label: String = ""
    groupName: String = ""
    users: [UsersInputTypeType!]!
  ): GroupType
  addSubcategory(
    subcategory: SubcategoryInputType!
  ): SubcategoryType
  addUser(
    indexNumber: Int!
    nick: String!
    firstName: String!
    secondName: String!
    role: String!
    email: String = ""
    label: String = ""
    createFirebaseUser: Boolean = false
    sendEmail: Boolean = false
  ): UserType
  addTeacher(
    firstName: String!
    secondName: String!
    email: String!
    label: String = ""
    createFirebaseUser: Boolean = false
    sendEmail: Boolean = false
  ): UserType
  parseUsersFromCsv(
    fileId: Int!,
    editionId: Int!
  ): ParsedUsersTypeType!
  resetPassword(userId: Int!): Boolean
  generateSubcategories(
    editionId: Int!
    categoryId: Int!
    subcategoryPrefix: String!
    subcategoryCount: Int!
    maxPoints: Float!
  ): [SubcategoryType]

  removeAwardFromEdition(
    awardId: Int!,
    editionId: Int!
  ): Boolean

  editAward(
    awardId: Int!,
    awardName: String,
    awardType: String,
    awardValue: Float,
    categoryId: Int,
    maxUsages: Int,
    description: String,
    fileId: Int,
    label: String
  ): AwardType

  removeAward(
    awardId: Int!
  ): Boolean

  removeCategory(
    categoryId: Int!
  ): Boolean

  editCategory(
    categoryId: Int!,
    categoryName: String,
    canAddPoints: Boolean,
    subcategories: [SubcategoryInputType!]
    lightColor: String,
    darkColor: String,
    label: String
  ): CategoryType

  removeCategoryFromEdition(
    categoryId: Int!,
    editionId: Int!
  ): Boolean

  editChestHistory(
    chestHistoryId: Int!,
    userId: Int,
    chestId: Int,
    teacherId: Int,
    subcategoryId: Int,
    label: String
  ): ChestHistoryType

  removeChestFromUser(
    chestHistoryId: Int!
  ): Boolean

  addAwardToChest(
    awardId: Int!,
    chestId: Int!
  ): ChestAwardType

  removeAwardFromChest(
    awardId: Int!,
    chestId: Int!
  ): Boolean

  editChest(
    chestId: Int!,
    chestType: String,
    fileId: Int,
    awardBundleCount: Int,
    label: String = "",
    awardIds: [Int!]!
  ): ChestType

  removeChest(
    chestId: Int!
  ): Boolean

  editEdition(
    editionId: Int!,
    editionName: String,
    editionYear: Int,
    label: String
  ): EditionType

  removeEdition(
    editionId: Int!
  ): Boolean

  editGroup(
    groupId: Int!,
    groupName: String,
    usosId: Int,
    weekdayId: Int,
    startTime: String,
    endTime: String,
    teacherId: Int,
    label: String
  ): GroupType

  editGroupWithUsers(
    groupId: Int!,
    groupName: String,
    usosId: Int,
    weekdayId: Int,
    startTime: String,
    endTime: String,
    teacherId: Int,
    label: String
    users: UserIdsType!
  ): GroupType

  removeGroup(
    groupId: Int!
  ): Boolean

  addLevelSet(
    levels: [LevelInputType!]!
  ): LevelSetType!

  copyLevelSet(
    levelSetId: Int!
  ): LevelSetType!

  editLevelSet(
    levelSetId: Int!,
    levels: [LevelInputType!]!
  ): LevelSetType!

  removeLevelSet(
    levelSetId: Int!
  ): Boolean

  addLevelSetToEdition(
    levelSetId: Int!
    editionId: Int!
  ): LevelSetType!

  removeLevelSetFromEdition(
    levelSetId: Int!,
    editionId: Int!
  ): Boolean


  editPoints(
    pointsId: Int!,
    updatedById: Int!,
    value: Float
  ): PointType

  removePoints(
    pointsId: Int!
  ): Boolean

  editSubcategory(
    subcategoryId: Int!,
    subcategoryName: String,
    maxPoints: Float,
    ordinalNumber: Int,
    label: String
  ): SubcategoryType

  removeSubcategory(
    subcategoryId: Int!
  ): Boolean

  addUserToGroup(
    userId: Int!,
    groupId: Int!
  ): UserGroupType

  changeStudentGroup(
    userId: Int!,
    groupId: Int!
  ): UserGroupType

  removeUserFromGroup(
    userId: Int!,
    groupId: Int!
  ): Boolean

  editUser(
    userId: Int!,
    indexNumber: Int,
    nick: String,
    firstName: String,
    secondName: String,
    role: String,
    label: String
  ): UserType

  removeUser(
    userId: Int!
  ): Boolean
  copyChest(
    chestId: Int!,
  ): ChestType

  addChestToEdition(
    chestId: Int!,
    editionId: Int!
  ): ChestEditionType

  removeChestFromEdition(
    chestId: Int!,
    editionId: Int!
  ): Boolean


}

type Query {
  getUsersInGroupWithPoints(groupId: Int!): [UserPointsType]!
  getStudentPoints(studentId: Int!, editionId: Int!): StudentPointsType!
  getSumOfPointsForStudentByCategory(
    studentId: Int!
    editionId: Int!
  ): [CategoryPointsSumType!]!
  getPossibleGroupsWeekdays(editionId: Int!): [WeekdayType!]!
  getPossibleGroupsTimeSpans(editionId: Int!): [TimeSpansType!]!
  getPossibleGroupDates(editionId: Int!): [GroupDateType!]!
  getNeighboringLevels(studentId: Int!, editionId: Int!): NeighboringLevelsType!
  getGroupsInEdition(editionId: Int!, teacherId: Int!): [GroupTeacherType!]!
  getCurrentUser: UserType!
  getFilesGroupedByType: [FileGroupType!]!
  getFilesGroupedByTypeBySelectedTypes(fileTypes: [String!]!): [FileGroupType!]!
  validateUsersToBeAdded(userIndexes: [Int!]!, editionId: Int!): [NotValidUserType!]!

  checkFullPermission(input: PermissionInputType!): PermissionType!
  checkPartialPermission(input: PermissionInputType!): PermissionType!

  listSetupUsers(
    editionId: Int!
  ): [UserWithPermissionsType!]!
  listSetupLevelSets(
      editionId: Int!
  ): [LevelSetWithPermissionsType!]!
  listSetupGroups(
      editionId: Int!
  ): [GroupWithPermissionsType!]!
  listSetupChests(
      editionId: Int!
  ): [ChestWithPermissionsType!]!
  listSetupCategories(
      editionId: Int!
  ): [CategoryWithPermissionsType!]!
  listSetupAwards(
      editionId: Int!
  ): [AwardWithPermissionsType!]!


}

scalar JSON

type AwardType {
  awardId: ID!
  awardName: String!
  awardType: AwardTypeType!
  description: String!
  label: String!
  maxUsages: Int!
  awardValue: String!
  category: CategoryType!
  imageFile: FileType
  chestAward: [ChestAwardType]!
  bonuses: [BonusType]!
  awardEditions: [AwardEditionType!]!
}

type AwardEditionType {
  awardEditionId: ID!
  award: AwardType!
  edition: EditionType!
  label: String!
}

type BonusType {
  bonusId: ID!
  points: PointType!
  award: AwardType!
  createdAt: String!
  updatedAt: String!
  label: String!
  chestHistory: ChestHistoryType!
}

type CategoryType {
  categoryId: ID!
  categoryName: String!
  lightColor: String!
  darkColor: String!
  canAddPoints: Boolean!
  gradingChecks: [GradingChecksType!]!
  categoryEdition: [CategoryEditionType!]!
  subcategories: [SubcategoryType!]!
  awards: [AwardType!]!
  label: String!
}

type CategoryEditionType {
  categoryEditionId: ID!
  category: CategoryType!
  edition: EditionType!
  label: String!
}

type ChestAwardType {
  chestAwardId: ID!
  chest: ChestType!
  award: AwardType!
  label: String!
}

type ChestHistoryType {
  chestHistoryId: ID!
  user: UserType!
  chest: ChestType!
  subcategory: SubcategoryType!
  label: String!
  createdAt: String!
  updatedAt: String!
  teacher: UserType!
  opened: Boolean!
  bonuses: [BonusType]!
}

type ChestType {
  chestId: ID!
  chestType: String!
  label: String!
  active: Boolean!
  awardBundleCount: Int!
  chestHistory: [ChestHistoryType]!
  chestAward: [ChestAwardType]!
  chestEdition: [ChestEditionType]!
  imageFile: FileType
}

type EditionType {
  editionId: ID!
  editionName: String!
  editionYear: Int!
  startDate: String!
  endDate: String!
  label: String!
  levelSet: LevelSetType!
  userLevels: [UserLevelType]!
  categoryEdition: [CategoryEditionType]!
  chestEdition: [ChestEditionType]!
  awardEdition: [AwardEditionType]!
  gradingChecks: [GradingChecksType]!
  groups: [GroupType]!
  subcategories: [SubcategoryType]!
}

type FileType {
  fileId: ID!
  pathToFile: String!
  fileName: String!
  fileType: String!
  createdAt: String!
  updatedAt: String!
  label: String!
  awards: [AwardType]!
  chests: [ChestType]!
  groups: [GroupType]!
  levels: [LevelType]!
  users: [UserType]!
}

type GradingChecksType {
  gradingCheckId: ID!
  edition: EditionType!
  endOfLabsDate: String!
  endOfLabsLevelsThreshold: LevelType!
  projectPointsThreshold: Float!
  project: CategoryType!
}

type GroupType {
  groupsId: ID!
  groupName: String
  generatedName: String!
  usosId: Int!
  label: String
  teacher: UserType!
  weekday: WeekdayType!
  startTime: String!
  endTime: String!
  imageFile: FileType
  userGroups: [UserGroupType]!
  edition: EditionType!
}

type LevelType {
  levelId: ID!
  levelName: String!
  minimumPoints: String!
  maximumPoints: String!
  grade: String!
  ordinalNumber: Int!
  label: String!
  levelSet: LevelSetType!
  highest: Boolean!
  imageFile: FileType
  userLevels: [UserLevelType!]!
  gradingChecks: [GradingChecksType]!
}

type PointType {
  pointsId: ID!
  student: UserType!
  teacher: UserType!
  updatedBy: UserType!
  value: String!
  subcategory: SubcategoryType!
  bonuses: [BonusType]!
  label: String!
  createdAt: String!
  updatedAt: String!
}

type PointsHistoryType {
  pointsHistoryId: ID!
  pointsId: ID!
  student: UserType!
  teacher: UserType!
  updatedBy: UserType!
  value: String!
  subcategory: SubcategoryType!
  label: String!
  createdAt: String!
  updatedAt: String!
  copiedAt: String!
}

type SubcategoryType {
  subcategoryId: ID!
  subcategoryName: String!
  category: CategoryType!
  label: String!
  edition: EditionType
  maxPoints: String!
  ordinalNumber: Int!
  chestHistory: [ChestHistoryType]!
  points: [PointType]!
  pointsHistory: [PointsHistoryType]!
}

type UserGroupType {
  userGroupsId: ID!
  group: GroupType!
  user: UserType!
}

type UserLevelType {
  user: UserType!
  level: LevelType!
  edition: EditionType!
  end_of_labs_levels_reached: Boolean!,
  project_points_threshold_reached: Boolean!,
  computed_grade: Float!
  label: String!
  userLevelId: ID!
}

type UserType {
  userId: ID!
  nick: String!
  role: UsersRolesType!
  indexNumber: Int!
  firstName: String!
  secondName: String!
  email: String!
  label: String!
  firebaseUid: String
  imageFile: FileType
  userGroups: [UserGroupType]!
  userLevels: [UserLevelType]!
  points: [PointType]!
  pointsByTeacher: [PointType]!
  pointsByUpdatedBy: [PointType]!
  pointsHistory: [PointsHistoryType]!
  pointsHistoryByTeacher: [PointsHistoryType]!
  groups: [GroupType]!
  chestHistory: [ChestHistoryType]!
  chestHistoryByTeacher: [ChestHistoryType]!
}

type WeekdayType {
  weekdayId: ID!
  weekdayName: String!
  weekdayAbbr: String!
  ordinalNumber: Int!
  label: String!
  groups: [GroupType]!
}

enum UsersRolesType {
  STUDENT
  TEACHER
  UNAUTHENTICATED_USER
  COORDINATOR
}

enum AwardTypeType {
  ADDITIVE_NEXT
  ADDITIVE_PREV
  ADDITIVE
  MULTIPLICATIVE
}

type CategoryPointsSumType {
  category: CategoryType!
  sumOfPurePoints: Float!
  sumOfBonuses: Float!
  sumOfAll: Float!
  maxPoints: Float!
}

type StudentPointsType {
  user: UserType!
  teacher: UserType!
  level: LevelType
  subcategoryPoints: [SubcategoryPointsType!]!
  sumOfPurePoints: Float!
  sumOfBonuses: Float!
  sumOfAll: Float!
}

type AddBonusReturnType {
  bonus: BonusType!
  points: PointType!
}

type UserPointsType {
  user: UserType!
  categoriesPoints: [CategoryPointsType!]!
}

type CategoryAggregate {
  category: CategoryType!
  sumOfPurePoints: Float!
  sumOfBonuses: Float!
  sumOfAll: Float!
}

type CategoryPointsType {
  category: CategoryType!
  subcategoryPoints: [SubcategoryPointsType!]!
  aggregate: CategoryAggregate!
}

type SubcategoryPointsType {
  subcategory: SubcategoryType!
  points: PurePointsType!
  teacher: UserType!
  createdAt: String!
  updatedAt: String!
}

type PurePointsType {
  purePoints: PointType
  partialBonusType: [PartialBonusType]!
}

type PartialBonusType {
  bonuses: BonusType!
  partialValue: Float!
}

type TimeSpansType {
  startTime: String!
  endTime: String!
}

type GroupDateType {
  weekday: WeekdayType!
  startTime: String!
  endTime: String!
}

type NeighboringLevelsType {
  sumOfAllPoints: String!
  prevLevel: LevelType
  currLevel: LevelType!
  nextLevel: LevelType
}

type GroupTeacherType {
  group: GroupType!
  owns: Boolean!
  canEdit: Boolean!
}

type FileGroupType {
  fileType: String!
  files: [FileType!]!
}

type ParsedUsersTypeType {
  users: [UserType!]!,
  usosId: Int!,
}

type NotValidUserType {
  user: UserType!
  group: GroupType!
}

type LevelSetType {
  levelSetId: ID!,
  levelSetName: String!,
  edition: [EditionType!]!
  levels: [LevelType!]!
}

type ChestEditionType {
  chestEditionId: ID!
  chest: ChestType!
  edition: EditionType!
  label: String!
}


type PermissionType {
  action: String!
  arguments: JSON!
  allow: Boolean!
  reason: String
  stackTrace: String!
}

type GroupPointsType{
  student: UserType!
  points: PointType
}

type UserWithPermissionsType{
  user: UserType!,
  permissions: ListPermissionsOutputType!
}

type LevelSetWithPermissionsType{
  levelSet: LevelSetType!,
  permissions: ListPermissionsOutputType!
}
type GroupWithPermissionsType{
  group: GroupType!,
  permissions: ListPermissionsOutputType!
}
type ChestWithPermissionsType{
  chest: ChestType!,
  permissions: ListPermissionsOutputType!
}

type CategoryWithPermissionsType{
  category: CategoryType!,
  permissions: ListPermissionsOutputType!
}

type AwardWithPermissionsType{
  award: AwardType!,
  permissions: ListPermissionsOutputType!
}


type ListPermissionsOutputType{
  canAdd: PermissionType!
  canEdit: PermissionType!
  canCopy: PermissionType!
  canRemove: PermissionType!
  canSelect: PermissionType!
  canUnselect: PermissionType!
  additional: [PermissionType!]!
}

input SubcategoryInputType {
  subcategoryId: ID
  subcategoryName: String!
  maxPoints: String!
  ordinalNumber: Int!
  categoryId: Int
  editionId: Int
  label: String!
}

input UsersInputTypeType {
  indexNumber: Int!
  nick: String!
  firstName: String!
  secondName: String!
  role: String!,
  email: String!
  label: String!
  imageFileId: Int
  createFirebaseUser: Boolean!
  sendEmail: Boolean!
}

input LevelInputType {
  levelId: ID
  name: String!,
  maximumPoints: String!,
  grade: String!,
  imageFileId: ID
}

input UserIdsType {
  userIds: [Int!]!
}


input PermissionInputType {
  action: String!
  arguments: JSON!
}

input GroupPointsInputType{
  studentId: Int!,
  value: Float
}
