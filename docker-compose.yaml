services:
  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: "Europe/Warsaw"
    ports:
      - "6543:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 10

  hasura:
    image: hasura/graphql-engine:latest
    platform: linux/arm64/v8
    ports:
      - "9191:8080" # Mapping custom external port 9191 to internal default Hasura port 8080
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: ${HASURA_GRAPHQL_DATABASE_URL}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # Set to "false" to disable console
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_EXPERIMENTAL_FEATURES: "naming_convention"
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: "unauthenticated_user"
      HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: "true"
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}

  backend:
    build:
      context: ./backend
      dockerfile: ./backend/Dockerfile
      args:
        BRANCH: release
    ports:
      - "9090:9090" # Map backend application port
    depends_on:
      - postgres
      - hasura
    environment:
      SPRING_PROFILES_ACTIVE: docker # Use the docker profile
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}

  frontend:
    build:
      context: ./frontend
      dockerfile: ./frontend/Dockerfile
      args:
        BRANCH: release
    ports:
      - "3000:80" # Map frontend port (nginx serves it)
    depends_on:
      - backend
      - hasura

volumes:
  postgres_data:
